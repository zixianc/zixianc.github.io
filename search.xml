<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java类加载过程]]></title>
    <url>%2F2018%2F02%2F20%2Fjava-class-loader%2F</url>
    <content type="text"><![CDATA[Java运行的是这样的，首先Java编译器将我们的源代码编译成为字节码，然后由JVM将字节码load到内存中，接着我们的程序就可以创建对象了 类加载过程一个java文件被加载到内存中需要经历三个阶段 加载-连接（验证+准备+解析）-&gt;初始化 加载查找并加载类的二进制数据 连接验证：确保被加载的类的正确性准备：为类的静态变量分配内存，并将其初始化为默认值解析：把类中的符号引用转换为直接引用 初始化为类的静态变量赋予正确的初始值（自主赋予的值） 类的初始化Java程序对类的使用方式可分为2种，主动使用和被动使用。所有的Java虚拟机实现必须在每个类或接口被Java程序首次主动使用时才初始化他们 类的初始化触发（主动调用） 创建类的实例，也就是new一个对象 访问某个类或接口的静态变量，或者对该静态变量赋值 调用类的静态方法 反射（Class.forName(“cc.zxian”)） 初始化一个类的子类（会首先初始化子类的父类） Java虚拟机启动时被标明为启动类的类（文件名和类名相同，含有main方法并且是启动方法的类） 类的初始化顺序 如果这个类还没有被加载和链接，那先进行加载和链接 假如这个类存在直接父类，并且这个类还没有被初始化（注意：在一个类加载器中，类只能初始化一次），那就初始化直接的父类（不适用于接口） 加入类中存在初始化语句（如static变量和static块），那就依次执行这些初始化语句。 总的来说，初始化顺序依次是：（静态变量、静态初始化块）–&gt;（变量、初始化块）–&gt; 构造器；如果有父类，则顺序是：父类static方法 –&gt; 子类static方法 –&gt; 父类构造方法- -&gt; 子类构造方法 类加载器加载器介绍 BootstrapClassLoader（启动类加载器）负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class，加载System.getProperty(“sun.boot.class.path”)所指定的路径或jar。 ExtensionClassLoader（标准扩展类加载器）负责加载java平台中扩展功能的一些jar包，包括$JAVA_HOME中jre/lib/*.jar或-Djava.ext.dirs指定目录下的jar包。加载System.getProperty(“java.ext.dirs”)所指定的路径或jar。 AppClassLoader（系统类加载器）负责加载classpath中指定的jar包及目录中class CustomClassLoader（自定义加载器）属于应用程序根据自身需要自定义的ClassLoader，如tomcat、jboss都会根据j2ee规范自行实现。 类加载器的顺序 加载过程中会先检查类是否被已加载，检查顺序是自底向上，从Custom ClassLoader到BootStrap ClassLoader逐层检查，只要某个classloader已加载就视为已加载此类，保证此类只所有ClassLoader加载一次。而加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。 在加载类时，每个类加载器会将加载任务上交给其父，如果其父找不到，再由自己去加载。 Bootstrap Loader（启动类加载器）是最顶级的类加载器了，其父加载器为null。 参考 java中类的加载顺序介绍(ClassLoader) 深入剖析Classloader(一)–类的主动使用与被动使用]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态策略灰度发布系统（ABTestingGateway部署和使用）]]></title>
    <url>%2F2018%2F02%2F11%2Fabtesting-gateway-install%2F</url>
    <content type="text"><![CDATA[部署ABTestingGateway12git clone https://github.com/CNSRE/ABTestingGateway.gitcd /path/to/ABTestingGateway/utils &amp;&amp; mkdir logs 安装openresty安装依赖 123wget https://openresty.org/download/openresty-1.9.7.5.tar.gzyum install pcre-devel -yyum install openssl-devel -y 编译 12./configuregmake &amp;&amp; gmake install 编译完成配置nginx的环境变量 安装redis1234wget http://download.redis.io/releases/redis-4.0.6.tar.gztar -zxvf redis-4.0.6.tar.gzcd /path/to/redis-4.0.6./make MALLOC=libc 配置src环境变量 123cd /path/to/ABTestingGateway/utils# 该redis.conf文件默认为protected-mode模式,关闭才可远程连接redis-server conf/redis.conf 部署测试按照github上的例子进行测试 12345678910111213141516171819202122232425262728# 启动upstream server，其中stable为默认upstream1. /usr/local/nginx/sbin/nginx -p `pwd` -c conf/stable.conf2. /usr/local/nginx/sbin/nginx -p `pwd` -c conf/beta1.conf3. /usr/local/nginx/sbin/nginx -p `pwd` -c conf/beta2.conf4. /usr/local/nginx/sbin/nginx -p `pwd` -c conf/beta3.conf5. /usr/local/nginx/sbin/nginx -p `pwd` -c conf/beta4.conf# 启动灰度系统，proxy server，灰度系统的配置也写在conf/nginx.conf中6. /usr/local/nginx/sbin/nginx -p `pwd` -c conf/nginx.conf# 简单验证：添加分流策略组$ curl 127.0.0.1:8080/ab_admin?action=policygroup_set -d '&#123;"1":&#123;"divtype":"uidsuffix","divdata":[&#123;"suffix":"1","upstream":"beta1"&#125;,&#123;"suffix":"3","upstream":"beta2"&#125;,&#123;"suffix":"5","upstream":"beta1"&#125;,&#123;"suffix":"0","upstream":"beta3"&#125;]&#125;,"2":&#123;"divtype":"arg_city","divdata":[&#123;"city":"BJ","upstream":"beta1"&#125;,&#123;"city":"SH","upstream":"beta2"&#125;,&#123;"city":"XA","upstream":"beta1"&#125;,&#123;"city":"HZ","upstream":"beta3"&#125;]&#125;,"3":&#123;"divtype":"iprange","divdata":[&#123;"range":&#123;"start":1111,"end":2222&#125;,"upstream":"beta1"&#125;,&#123;"range":&#123;"start":3333,"end":4444&#125;,"upstream":"beta2"&#125;,&#123;"range":&#123;"start":7777,"end":2130706433&#125;,"upstream":"beta2"&#125;]&#125;&#125;'&#123;"desc":"success ","code":200,"data":&#123;"groupid":0,"group":[0,1,2]&#125;&#125;# 简单验证：设置运行时策略$ curl "127.0.0.1:8080/ab_admin?action=runtime_set&amp;hostname=api.weibo.cn&amp;policygroupid=0"# 分流$ curl 127.0.0.1:8030 -H 'X-Uid:39' -H 'X-Real-IP:192.168.1.1'this is stable server$ curl 127.0.0.1:8030 -H 'X-Uid:30' -H 'X-Real-IP:192.168.1.1'this is beta3 server$ curl 127.0.0.1:8030/?city=BJ -H 'X-Uid:39' -H 'X-Real-IP:192.168.1.1'this is beta1 server 配置文件说明1cd /path/to/ABTestingGateway/utils/conf 关键配置文件为nginx.conf、default.conf、upstream.conf、vhost.conf nginx.conf为nginx入口配置文件,在这里引入包含其他配置文件 default.conf为管理后台配置文件 upstream.conf为upstream配置文件 vhost.conf为代理转发配置文件模板 ABTestingGateway多环境多项目配置 复制一份vhost.conf备用,然后修改vhost.conf,修改后如下(去掉server部分) 12345lua_shared_dict api_root_sysConfig 1m;lua_shared_dict kv_api_root_upstream 100m;lua_shared_dict api_abc_sysConfig 1m;lua_shared_dict kv_api_abc_upstream 100m; 配置upstream，假设有两个环境三个项目 12345678910111213141516171819202122232425262728293031#####gray env#####upstream beta1_login &#123; server 10.10.16.147:3000 weight=1 fail_timeout=10 max_fails=1; keepalive 1000;&#125;upstream beta1_auth &#123; server 10.10.16.147:3002 weight=1 fail_timeout=10 max_fails=1; keepalive 1000;&#125;upstream beta1_api &#123; server 10.10.16.140:8080 weight=1 fail_timeout=10 max_fails=1; keepalive 1000;&#125;#####prod env#####upstream stable_login &#123; server 10.10.16.106:3000 weight=1 fail_timeout=10 max_fails=1;&#125;upstream stable_auth &#123; server 10.10.16.106:3002 weight=1 fail_timeout=10 max_fails=1;&#125;upstream stable_api &#123; server 10.10.16.111:8080 weight=1 fail_timeout=10 max_fails=1; keepalive 1000;&#125; 配置转发规则，删除之前vhost.conf的备用文件中在第一步骤的内容，分别复制命令为login.conf、auth.conf、api.conf。修改listen、server_name；stable替换为upstream中配置的名称 1234567891011121314151617181920212223242526272829303132333435363738394041server &#123; listen 80; server_name tlogin.abtesting.com; access_log logs/vhost_access.log main; error_log logs/vhost_error.log; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; set $redis_host '127.0.0.1'; set $redis_port '6379'; set $redis_uds '/var/run/redis.sock'; set $redis_connect_timeout 10000; set $redis_dbid 0; set $redis_pool_size 1000; set $redis_keepalive_timeout 90000; location ~* /abc/(i|f)/ &#123; set $hostkey $server_name.abc; set $sysConfig api_abc_sysConfig; set $kv_upstream kv_api_abc_upstream; set $backend 'stable_login'; rewrite_by_lua_file '../diversion/diversion.lua'; proxy_pass http://$backend; &#125; location / &#123; error_log logs/vhost_error.log debug; set $hostkey $server_name; set $sysConfig api_root_sysConfig; set $kv_upstream kv_api_root_upstream; set $backend 'stable_login'; rewrite_by_lua_file '../diversion/diversion.lua'; rewrite ^(.*)$ https://$host$1 permanent; proxy_pass http://$backend; &#125;&#125; 添加ab规则，以city_arg规则为例为保证测试的一直性，将redis的数据清空，进入redis-cli执行flushdb，关闭所有nginx进行执行kill -9 pgrep nginx，操作完后添加规则并设置hostname对应的规则 123456curl 127.0.0.1:8080/ab_admin?action=policy_set -d '&#123;"divtype":"arg_city","divdata":[&#123;"city":"BJ","upstream":"beta1_api"&#125;]&#125;'curl "127.0.0.1:8080/ab_admin?action=runtime_set&amp;hostname=tapi.abtesting.com&amp;policid=0"curl 127.0.0.1:8080/ab_admin?action=policy_set -d '&#123;"divtype":"arg_city","divdata":[&#123;"city":"BJ","upstream":"beta1_login"&#125;]&#125;'curl "127.0.0.1:8080/ab_admin?action=runtime_set&amp;hostname=tlogin.abtesting.com&amp;policyid=1"curl 127.0.0.1:8080/ab_admin?action=policy_set -d '&#123;"divtype":"arg_city","divdata":[&#123;"city":"BJ","upstream":"beta1_auth"&#125;]&#125;'curl "127.0.0.1:8080/ab_admin?action=runtime_set&amp;hostname=tauth.abtesting.com&amp;policyid=2" 启动服务，测试规则 12cd /path/to/ABTestingGateway/utilsnginx -p `pwd` -c conf/nginx.conf 在浏览器中输入tapi.abtesting.com将转发到stable_api配置的upstream，输入tapi.abtesting.com?city=BJ将转发到beta1_api配置的upstream，tlogin.abtesting.com和tauth.abtesting.com同理，这里域名可以修改主机的hosts文件来绑定 https支持以https://tapi.abtesting.com为例，修改api.conf将80端口的server复制一份修改监听端口为443，在server_name下面添加如下配置 1234567ssl on;ssl_certificate abtesting.com_bundle.crt;ssl_certificate_key abtesting.com.key;ssl_session_timeout 5m;ssl_protocols SSLv3 TLSv1;ssl_ciphers HIGH:!ADH:!EXPORT56:RC4+RSA:+MEDIUM;ssl_prefer_server_ciphers on; 其中abtesting.com_bundle.crt和abtesting.com.key分别为私钥和公钥的文件名，放置在nginx.conf的同目录中，最终为 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748server &#123; listen 443; server_name tlogin.abtesting.com; ssl on; ssl_certificate abtesting.com_bundle.crt; ssl_certificate_key abtesting.com.key; ssl_session_timeout 5m; ssl_protocols SSLv3 TLSv1; ssl_ciphers HIGH:!ADH:!EXPORT56:RC4+RSA:+MEDIUM; ssl_prefer_server_ciphers on; access_log logs/vhost_access.log main; error_log logs/vhost_error.log; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; set $redis_host '127.0.0.1'; set $redis_port '6379'; set $redis_uds '/var/run/redis.sock'; set $redis_connect_timeout 10000; set $redis_dbid 0; set $redis_pool_size 1000; set $redis_keepalive_timeout 90000; location ~* /abc/(i|f)/ &#123; set $hostkey $server_name.abc; set $sysConfig api_abc_sysConfig; set $kv_upstream kv_api_abc_upstream; set $backend 'stable_login'; rewrite_by_lua_file '../diversion/diversion.lua'; proxy_pass http://$backend; &#125; location / &#123; error_log logs/vhost_error.log debug; set $hostkey $server_name; set $sysConfig api_root_sysConfig; set $kv_upstream kv_api_root_upstream; set $backend 'stable_login'; rewrite_by_lua_file '../diversion/diversion.lua'; proxy_pass http://$backend; &#125;&#125; 修改完成后重启nginx，执行 1nginx -p `pwd` -c conf/nginx.conf -s reload 在浏览器中输入https://tapi.abtesting.com和https://stapi.abtesting.com?city=BJ进行测试，如需将http重定向为https，在80监听的location /中添加rewrite ^(.*)$ https://$host$1 permanent; websocket支持 在upstream中添加websocket的upstream 123456upstream beta1_websocket &#123; server 10.10.16.91:8899 weight=1 fail_timeout=10 max_fails=1;&#125;upstream stable_websocket &#123; server 10.10.16.117:8899 weight=1 fail_timeout=10 max_fails=1;&#125; 复制一份api.conf命名为websocket.conf，修改server_name和stable对应的配置，分别在80和443监听中location /位置添加如下配置 1234proxy_http_version 1.1;proxy_read_timeout 7200s;proxy_set_header Upgrade $http_upgrade;proxy_set_header Connection $connection_upgrade; 在nginx.conf文件中添加如下配置，重启nginx 1234map $http_upgrade $connection_upgrade &#123; default upgrade; '' close;&#125; 添加websocket的AB规则并绑定 12curl 127.0.0.1:8080/ab_admin?action=policy_set -d '&#123;"divtype":"arg_city","divdata":[&#123;"city":"BJ","upstream":"beta1_websocket"&#125;]&#125;'curl "127.0.0.1:8080/ab_admin?action=runtime_set&amp;hostname=twebsocket.abtesting.com&amp;policid=3" 测试websocket，如下为websocket的h5客户端，修改ws的地址后打开页面进行测试 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;My WebSocket&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Welcome&lt;br/&gt;&lt;input id="text" type="text" /&gt;&lt;button onclick="send()"&gt;Send&lt;/button&gt; &lt;button onclick="closeWebSocket()"&gt;Close&lt;/button&gt;&lt;div id="message"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script type="text/javascript"&gt; var websocket = null; //判断当前浏览器是否支持WebSocket if('WebSocket' in window)&#123; websocket = new WebSocket("wss://twebsocket.abtesting.com/websocket?city=BJ"); &#125; else&#123; alert('Not support websocket') &#125; //连接发生错误的回调方法 websocket.onerror = function()&#123; setMessageInnerHTML("error"); &#125;; //连接成功建立的回调方法 websocket.onopen = function(event)&#123; setMessageInnerHTML("open"); setMessageInnerHTML(getNowFormatDate()); &#125; //接收到消息的回调方法 websocket.onmessage = function(event)&#123; setMessageInnerHTML(event.data); &#125; //连接关闭的回调方法 websocket.onclose = function()&#123; setMessageInnerHTML("close"); setMessageInnerHTML(getNowFormatDate()); &#125; //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。 window.onbeforeunload = function()&#123; websocket.close(); &#125; //将消息显示在网页上 function setMessageInnerHTML(innerHTML)&#123; document.getElementById('message').innerHTML += innerHTML + '&lt;br/&gt;'; &#125; //关闭连接 function closeWebSocket()&#123; websocket.close(); &#125; // 获取当前日期 function getNowFormatDate() &#123; var date = new Date(); var seperator1 = "-"; var seperator2 = ":"; var month = date.getMonth() + 1; var strDate = date.getDate(); if (month &gt;= 1 &amp;&amp; month &lt;= 9) &#123; month = "0" + month; &#125; if (strDate &gt;= 0 &amp;&amp; strDate &lt;= 9) &#123; strDate = "0" + strDate; &#125; var currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate + " " + date.getHours() + seperator2 + date.getMinutes() + seperator2 + date.getSeconds(); return currentdate; &#125; //发送消息 function send()&#123; var message = document.getElementById('text').value; websocket.send(message); &#125;&lt;/script&gt;&lt;/html&gt; 地址为wss://twebsocket.abtesting.com/websokcet将转发到stable_websocket，wss://twebsocket.abtesting.com/websokcet?city=BJ将转发到beta1_websocket]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>动态灰度发布</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jenkins+docker持续集成构建SpringBoot项目]]></title>
    <url>%2F2017%2F12%2F06%2Fspringboot-docker-jenkins%2F</url>
    <content type="text"><![CDATA[SpringBoot项目配置假设要构建一个用户中心服务，新建一个名为user-center的SpringBoot项目 在springboot项目pom.xml中添加依赖1234567891011121314151617181920212223242526&lt;!-- docker打包 --&gt;&lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;0.4.13&lt;/version&gt; &lt;configuration&gt; &lt;serverId&gt;docker-hosted&lt;/serverId&gt; &lt;!-- docker仓库地址，用于推送镜像 --&gt; &lt;registryUrl&gt;$&#123;docker.repository&#125;&lt;/registryUrl&gt; &lt;pushImage&gt;true&lt;/pushImage&gt; &lt;!-- Dockerfile路径 --&gt; &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt; &lt;!-- 构建的镜像名称 --&gt; &lt;imageName&gt;$&#123;docker.repository&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt; &lt;imageTags&gt; &lt;imageTag&gt;latest&lt;/imageTag&gt; &lt;/imageTags&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt;&lt;/plugin&gt; docker仓库地址可以直接写在pom文件中，但为了多环境配置可以将地址配置在maven-settings.xml 123456789101112&lt;profiles&gt; &lt;profile&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;properties&gt; &lt;docker.repository&gt;10.10.16.160:8083&lt;/docker.repository&gt; &lt;/properties&gt;&lt;/profile&gt;&lt;/profiles&gt;&lt;activeProfiles&gt; &lt;activeProfile&gt;nexus&lt;/activeProfile&gt; &lt;/activeProfiles&gt; 创建Dockerfile123456FROM java:8 # 基础镜像（主程序镜像）VOLUME /tmp # 挂在tmp盘ADD user-center-0.0.1-SNAPSHOT.jar workdir/app.jarWORKDIR workdir # 指定工作目录ENV JAVA_OPTS=""ENTRYPOINT [ "sh", "-c", "java -Djava.security.egd=file:/dev/./urandom -Duser.timezone=GMT+08 $JAVA_OPTS -jar /workdir/app.jar" ] # 程序入口，支持动态传参 测试手动构建镜像在命令行进入到项目路径执行mvn clean package docker:build来构建镜像，执行mvn clean package docker:build -DpushImage构建并推送镜像docker仓库 Jenkins项目构建新建一个名为user-center的maven项目 配置git仓库 配置构建服务器 配置构建步骤 运行脚本jenkins配置中用到的run-server脚本 1234567891011121314151617181920212223242526272829#!/bin/bash#私有仓库地址REPO_URL=$&#123;1&#125;#项目名称PROJ_NAME=$&#123;2&#125;#项目运行环境，多环境配置PROFILE_ACTIVE=$&#123;3&#125;#eureka注册中心地址，未接入忽略该配置EUREKA_URL=$&#123;4&#125;#停止原来的熔器docker stop $&#123;PROJ_NAME&#125;#删除原来的容器docker rm $&#123;PROJ_NAME&#125;#删除原来的镜像docker rmi $&#123;REPO_URL&#125;/$&#123;PROJ_NAME&#125;#登录docker仓库docker login --username=username --password=passwd $&#123;REPO_URL&#125;#重新拉取新镜像docker pull $&#123;REPO_URL&#125;/$&#123;PROJ_NAME&#125;#运行新的容器docker run -itd \--restart=always \--net=host \-m 2048m \--name $&#123;PROJ_NAME&#125; \-v /etc/localtime:/etc/localtime:ro \--env JAVA_OPTS="-Dspring.profiles.active=$&#123;PROFILE_ACTIVE&#125; -Deureka.client.serviceUrl.defaultZone=$&#123;EUREKA_URL&#125; -server -Xms1024m -Xmx2048m -XX:PermSize=64M -XX:MaxNewSize=256m -XX:MaxPermSize=128m -Djava.awt.headless=true -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp" \$&#123;REPO_URL&#125;/$&#123;PROJ_NAME&#125;]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>springboot</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7安装mysql]]></title>
    <url>%2F2017%2F12%2F04%2Fmysql-install%2F</url>
    <content type="text"><![CDATA[安装mysql-rpm包直接安装: 1rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm 或者下载到本地后安装： 12wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpmyum localinstall mysql-community-release-el7-5.noarch.rpm 验证是否安装成功： 1yum repolist enabled | grep "mysql.*-community.*" 安装mysql-server12yum install mysql-community-server -yrpm -qi mysql-community-server.x86_64 0:5.6.24-3.el7 相关设置修改字符集1vi /etc/my.cnf 在[mysqld]下添加character_set_server = utf8，启动后SHOW VARIABLES LIKE &#39;character%&#39;;查看字符集信息 设置root密码systemctl start mysqld启动服务后mysqladmin -u root password &#39;new-passwd&#39; 开启远程访问12grant all privileges on *.* to 'root'@'%' identified by 'passwd' with grant option;FLUSH PRIVILEGES; ###安全设置（可选） 1mysql_secure_installation;]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[获取docker容器内java进程的堆栈信息]]></title>
    <url>%2F2017%2F11%2F23%2Fdocker-java-thread-heap-dump%2F</url>
    <content type="text"><![CDATA[进入docker容器内1docker exec -it CONTAINER_NAME bash 查看java进程1jps 转存进程Thread信息1jstack PID &gt; thread.tdump 转存进程Heap信息1jmap -dump:live,format=b,file=heapDump.hprof PID 从容器中拷贝出文件12sudo docker cp CONTAINER_NAME:threadDump.tdump .sudo docker cp CONTAINER_NAME:heapDump.hprof . 进行内存分析使用JProfiler、MAT等工具进行内存分析]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7安装docker]]></title>
    <url>%2F2017%2F11%2F22%2Fdocker-install%2F</url>
    <content type="text"><![CDATA[安装docker1234#aliyun镜像 curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -#daocloud镜像 curl -fsSL https://get.docker.com/ | sh 配置加速器123456mkdir -p /etc/dockertee /etc/docker/daemon.json &lt;&lt;-'EOF'&#123; "registry-mirrors": ["aliyun加速地址"]&#125;EOF 修改允许非安全的仓库1vi /usr/lib/systemd/system/docker.service 找到ExecStart属性，在dockerd后面添加–insecure-registry 服务器IP:Docker仓库端口 ，最终为： 1ExecStart=/usr/bin/dockerd --insecure-registry 0.0.0.0/0 设置开机并重启docker1234systemctl enable dockersystemctl daemon-reloadsystemctl restart dockerdocker login --username=admin --passwrod=seentao registry-host:port 安装docker-bash1234yum install wget -ywget -P ~ https://github.com/yeasy/docker_practice/raw/master/_local/.bashrc_dockerecho "[ -f ~/.bashrc_docker ] &amp;&amp; . ~/.bashrc_docker" &gt;&gt; ~/.bashrcsource ~/.bashrc]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
</search>
