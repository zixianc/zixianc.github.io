<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Java类加载过程]]></title>
      <url>https://zixianc.github.io/2018/02/20/java-class-loader/</url>
      <content type="html"><![CDATA[<p>Java运行的是这样的，首先Java编译器将我们的源代码编译成为字节码，然后由JVM将字节码load到内存中，接着我们的程序就可以创建对象了</p>
<h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p>一个java文件被加载到内存中需要经历三个阶段 <code>加载-连接（验证+准备+解析）-&gt;初始化</code><br><img src="http://p0kzweqn4.bkt.clouddn.com/java-classload.png" alt="java-classload"><br><a id="more"></a></p>
<ul>
<li>加载<br>查找并加载类的二进制数据</li>
<li>连接<br>验证：确保被加载的类的正确性<br>准备：为类的静态变量分配内存，并将其初始化为默认值<br>解析：把类中的符号引用转换为直接引用</li>
<li>初始化<br>为类的静态变量赋予正确的初始值（自主赋予的值）</li>
</ul>
<h2 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h2><p>Java程序对类的使用方式可分为2种，主动使用和被动使用。所有的Java虚拟机实现必须在每个类或接口被Java程序<strong>首次主动使用时才初始化他们</strong></p>
<h3 id="类的初始化触发（主动调用）"><a href="#类的初始化触发（主动调用）" class="headerlink" title="类的初始化触发（主动调用）"></a>类的初始化触发（主动调用）</h3><ol>
<li>创建类的实例，也就是new一个对象 </li>
<li>访问某个类或接口的静态变量，或者对该静态变量赋值</li>
<li>调用类的静态方法</li>
<li>反射（Class.forName(“cc.zxian”)）</li>
<li>初始化一个类的子类（会首先初始化子类的父类）</li>
<li>Java虚拟机启动时被标明为启动类的类（文件名和类名相同，含有main方法并且是启动方法的类）</li>
</ol>
<h3 id="类的初始化顺序"><a href="#类的初始化顺序" class="headerlink" title="类的初始化顺序"></a>类的初始化顺序</h3><ol>
<li>如果这个类还没有被加载和链接，那先进行加载和链接 </li>
<li>假如这个类存在直接父类，并且这个类还没有被初始化（注意：在一个类加载器中，类只能初始化一次），那就初始化直接的父类（不适用于接口） </li>
<li>加入类中存在初始化语句（如static变量和static块），那就依次执行这些初始化语句。 </li>
<li>总的来说，初始化顺序依次是：（静态变量、静态初始化块）–&gt;（变量、初始化块）–&gt; 构造器；如果有父类，则顺序是：父类static方法 –&gt; 子类static方法 –&gt; 父类构造方法- -&gt; 子类构造方法</li>
</ol>
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="加载器介绍"><a href="#加载器介绍" class="headerlink" title="加载器介绍"></a>加载器介绍</h3><ol>
<li>BootstrapClassLoader（启动类加载器）<br>负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class，加载System.getProperty(“sun.boot.class.path”)所指定的路径或jar。 </li>
<li>ExtensionClassLoader（标准扩展类加载器）<br>负责加载java平台中扩展功能的一些jar包，包括$JAVA_HOME中jre/lib/*.jar或-Djava.ext.dirs指定目录下的jar包。载System.getProperty(“java.ext.dirs”)所指定的路径或jar。 </li>
<li>AppClassLoader（系统类加载器）<br>负责记载classpath中指定的jar包及目录中class </li>
<li>CustomClassLoader（自定义加载器）<br>属于应用程序根据自身需要自定义的ClassLoader，如tomcat、jboss都会根据j2ee规范自行实现。</li>
</ol>
<p><img src="http://p0kzweqn4.bkt.clouddn.com/classloader.png" alt="类加载器"></p>
<h3 id="类加载器的顺序"><a href="#类加载器的顺序" class="headerlink" title="类加载器的顺序"></a>类加载器的顺序</h3><ol>
<li>加载过程中会先检查类是否被已加载，检查顺序是自底向上，从Custom ClassLoader到BootStrap ClassLoader逐层检查，只要某个classloader已加载就视为已加载此类，保证此类只所有ClassLoader加载一次。而加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。 </li>
<li>在加载类时，每个类加载器会将加载任务上交给其父，如果其父找不到，再由自己去加载。 </li>
<li>Bootstrap Loader（启动类加载器）是最顶级的类加载器了，其父加载器为null。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://blog.csdn.net/eff666/article/details/52203406" target="_blank" rel="external">java中类的加载顺序介绍(ClassLoader)</a></li>
<li><a href="http://yhjhappy234.blog.163.com/blog/static/3163283220115573911607/" target="_blank" rel="external">深入剖析Classloader(一)–类的主动使用与被动使用</a></li>
</ol>
<hr>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[动态策略灰度发布系统（ABTestingGateway部署和使用）]]></title>
      <url>https://zixianc.github.io/2018/02/11/abtesting-gateway-install/</url>
      <content type="html"><![CDATA[<h2 id="部署ABTestingGateway"><a href="#部署ABTestingGateway" class="headerlink" title="部署ABTestingGateway"></a><a href="https://github.com/CNSRE/ABTestingGateway" target="_blank" rel="external">部署ABTestingGateway</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/CNSRE/ABTestingGateway.git</div><div class="line"><span class="built_in">cd</span> /path/to/ABTestingGateway/utils &amp;&amp; mkdir logs</div></pre></td></tr></table></figure>
<h2 id="安装openresty"><a href="#安装openresty" class="headerlink" title="安装openresty"></a>安装openresty</h2><p>安装依赖</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget https://openresty.org/download/openresty-1.9.7.5.tar.gz</div><div class="line">yum install pcre-devel -y</div><div class="line">yum install openssl-devel -y</div></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure</div><div class="line">gmake &amp;&amp; gmake install</div></pre></td></tr></table></figure>
<p>编译完成配置nginx的环境变量<br><a id="more"></a></p>
<h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/releases/redis-4.0.6.tar.gz</div><div class="line">tar -zxvf redis-4.0.6.tar.gz</div><div class="line"><span class="built_in">cd</span> /path/to/redis-4.0.6</div><div class="line">./make MALLOC=libc</div></pre></td></tr></table></figure>
<p>配置src环境变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /path/to/ABTestingGateway/utils</div><div class="line"><span class="comment"># 该redis.conf文件默认为protected-mode模式,关闭才可远程连接</span></div><div class="line">redis-server conf/redis.conf</div></pre></td></tr></table></figure>
<h2 id="部署测试"><a href="#部署测试" class="headerlink" title="部署测试"></a>部署测试</h2><p>按照github上的例子进行测试</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动upstream server，其中stable为默认upstream</span></div><div class="line">1. /usr/<span class="built_in">local</span>/nginx/sbin/nginx -p `<span class="built_in">pwd</span>` -c conf/stable.conf</div><div class="line">2. /usr/<span class="built_in">local</span>/nginx/sbin/nginx -p `<span class="built_in">pwd</span>` -c conf/beta1.conf</div><div class="line">3. /usr/<span class="built_in">local</span>/nginx/sbin/nginx -p `<span class="built_in">pwd</span>` -c conf/beta2.conf</div><div class="line">4. /usr/<span class="built_in">local</span>/nginx/sbin/nginx -p `<span class="built_in">pwd</span>` -c conf/beta3.conf</div><div class="line">5. /usr/<span class="built_in">local</span>/nginx/sbin/nginx -p `<span class="built_in">pwd</span>` -c conf/beta4.conf</div><div class="line"></div><div class="line"><span class="comment"># 启动灰度系统，proxy server，灰度系统的配置也写在conf/nginx.conf中</span></div><div class="line">6. /usr/<span class="built_in">local</span>/nginx/sbin/nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf</div><div class="line"></div><div class="line"><span class="comment"># 简单验证：添加分流策略组</span></div><div class="line">$ curl 127.0.0.1:8080/ab_admin?action=policygroup_set -d <span class="string">'&#123;"1":&#123;"divtype":"uidsuffix","divdata":[&#123;"suffix":"1","upstream":"beta1"&#125;,&#123;"suffix":"3","upstream":"beta2"&#125;,&#123;"suffix":"5","upstream":"beta1"&#125;,&#123;"suffix":"0","upstream":"beta3"&#125;]&#125;,"2":&#123;"divtype":"arg_city","divdata":[&#123;"city":"BJ","upstream":"beta1"&#125;,&#123;"city":"SH","upstream":"beta2"&#125;,&#123;"city":"XA","upstream":"beta1"&#125;,&#123;"city":"HZ","upstream":"beta3"&#125;]&#125;,"3":&#123;"divtype":"iprange","divdata":[&#123;"range":&#123;"start":1111,"end":2222&#125;,"upstream":"beta1"&#125;,&#123;"range":&#123;"start":3333,"end":4444&#125;,"upstream":"beta2"&#125;,&#123;"range":&#123;"start":7777,"end":2130706433&#125;,"upstream":"beta2"&#125;]&#125;&#125;'</span></div><div class="line"></div><div class="line">&#123;<span class="string">"desc"</span>:<span class="string">"success "</span>,<span class="string">"code"</span>:200,<span class="string">"data"</span>:&#123;<span class="string">"groupid"</span>:0,<span class="string">"group"</span>:[0,1,2]&#125;&#125;</div><div class="line"></div><div class="line"><span class="comment"># 简单验证：设置运行时策略</span></div><div class="line"></div><div class="line">$ curl <span class="string">"127.0.0.1:8080/ab_admin?action=runtime_set&amp;hostname=api.weibo.cn&amp;policygroupid=0"</span></div><div class="line"></div><div class="line"><span class="comment"># 分流</span></div><div class="line">$ curl 127.0.0.1:8030 -H <span class="string">'X-Uid:39'</span> -H <span class="string">'X-Real-IP:192.168.1.1'</span></div><div class="line">this is stable server</div><div class="line"></div><div class="line">$ curl 127.0.0.1:8030 -H <span class="string">'X-Uid:30'</span> -H <span class="string">'X-Real-IP:192.168.1.1'</span></div><div class="line">this is beta3 server</div><div class="line"></div><div class="line">$ curl 127.0.0.1:8030/?city=BJ -H <span class="string">'X-Uid:39'</span> -H <span class="string">'X-Real-IP:192.168.1.1'</span></div><div class="line">this is beta1 server</div></pre></td></tr></table></figure>
<h2 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /path/to/ABTestingGateway/utils/conf</div></pre></td></tr></table></figure>
<p>关键配置文件为nginx.conf、default.conf、upstream.conf、vhost.conf</p>
<ul>
<li>nginx.conf为nginx入口配置文件,在这里引入包含其他配置文件</li>
<li>default.conf为管理后台配置文件</li>
<li>upstream.conf为upstream配置文件</li>
<li>vhost.conf为代理转发配置文件模板</li>
</ul>
<h2 id="ABTestingGateway多环境多项目配置"><a href="#ABTestingGateway多环境多项目配置" class="headerlink" title="ABTestingGateway多环境多项目配置"></a>ABTestingGateway多环境多项目配置</h2><ul>
<li>复制一份vhost.conf备用,然后修改vhost.conf,修改后如下(去掉server部分)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">lua_shared_dict api_root_sysConfig 1m;</div><div class="line">lua_shared_dict kv_api_root_upstream 100m;</div><div class="line"></div><div class="line">lua_shared_dict api_abc_sysConfig 1m;</div><div class="line">lua_shared_dict kv_api_abc_upstream 100m;</div></pre></td></tr></table></figure>
<ul>
<li>配置upstream，假设有两个环境三个项目</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#####gray env#####</span></div><div class="line"></div><div class="line">upstream  beta1_login  &#123;</div><div class="line">    server    10.10.16.147:3000    weight=1 fail_timeout=10 max_fails=1;</div><div class="line">    keepalive    1000;</div><div class="line">&#125;</div><div class="line"></div><div class="line">upstream  beta1_auth  &#123;</div><div class="line">    server    10.10.16.147:3002    weight=1 fail_timeout=10 max_fails=1;</div><div class="line">    keepalive    1000;</div><div class="line">&#125;</div><div class="line"></div><div class="line">upstream beta1_api &#123;</div><div class="line">    server    10.10.16.140:8080    weight=1 fail_timeout=10 max_fails=1;</div><div class="line">    keepalive    1000;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#####prod env#####</span></div><div class="line"></div><div class="line">upstream  stable_login  &#123;</div><div class="line">    server    10.10.16.106:3000    weight=1 fail_timeout=10 max_fails=1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">upstream  stable_auth  &#123;</div><div class="line">    server    10.10.16.106:3002    weight=1 fail_timeout=10 max_fails=1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">upstream stable_api &#123;</div><div class="line">    server    10.10.16.111:8080    weight=1 fail_timeout=10 max_fails=1;</div><div class="line">    keepalive    1000;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>配置转发规则，删除之前vhost.conf的备用文件中在第一步骤的内容，分别复制命令为login.conf、auth.conf、api.conf。修改listen、server_name；stable替换为upstream中配置的名称</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  tlogin.abtesting.com;</div><div class="line"></div><div class="line">        access_log logs/vhost_access.log  main;</div><div class="line">        error_log  logs/vhost_error.log;</div><div class="line"></div><div class="line">        proxy_redirect off;</div><div class="line">        proxy_set_header Host <span class="variable">$host</span>;</div><div class="line">        proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</div><div class="line"></div><div class="line">        <span class="built_in">set</span> <span class="variable">$redis_host</span> <span class="string">'127.0.0.1'</span>;</div><div class="line">        <span class="built_in">set</span> <span class="variable">$redis_port</span> <span class="string">'6379'</span>;</div><div class="line">        <span class="built_in">set</span> <span class="variable">$redis_uds</span> <span class="string">'/var/run/redis.sock'</span>;</div><div class="line">        <span class="built_in">set</span> <span class="variable">$redis_connect_timeout</span> 10000;</div><div class="line">        <span class="built_in">set</span> <span class="variable">$redis_dbid</span> 0;</div><div class="line">        <span class="built_in">set</span> <span class="variable">$redis_pool_size</span> 1000;</div><div class="line">        <span class="built_in">set</span> <span class="variable">$redis_keepalive_timeout</span> 90000;</div><div class="line"></div><div class="line">        location ~*  /abc/(i|f)/ &#123;</div><div class="line">                <span class="built_in">set</span> <span class="variable">$hostkey</span> <span class="variable">$server_name</span>.abc;</div><div class="line">                <span class="built_in">set</span> <span class="variable">$sysConfig</span> api_abc_sysConfig;</div><div class="line">                <span class="built_in">set</span> <span class="variable">$kv_upstream</span> kv_api_abc_upstream;</div><div class="line">                <span class="built_in">set</span> <span class="variable">$backend</span> <span class="string">'stable_login'</span>;</div><div class="line">                rewrite_by_lua_file <span class="string">'../diversion/diversion.lua'</span>;</div><div class="line">                proxy_pass http://<span class="variable">$backend</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line"></div><div class="line">                error_log  logs/vhost_error.log debug;</div><div class="line"></div><div class="line">                <span class="built_in">set</span> <span class="variable">$hostkey</span> <span class="variable">$server_name</span>;</div><div class="line">                <span class="built_in">set</span> <span class="variable">$sysConfig</span> api_root_sysConfig;</div><div class="line">                <span class="built_in">set</span> <span class="variable">$kv_upstream</span> kv_api_root_upstream;</div><div class="line">                <span class="built_in">set</span> <span class="variable">$backend</span> <span class="string">'stable_login'</span>;</div><div class="line">                rewrite_by_lua_file <span class="string">'../diversion/diversion.lua'</span>;</div><div class="line">                rewrite ^(.*)$  https://<span class="variable">$host</span><span class="variable">$1</span> permanent;</div><div class="line">                proxy_pass http://<span class="variable">$backend</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>添加ab规则，以city_arg规则为例<br>为保证测试的一直性，将redis的数据清空，进入redis-cli执行<code>flushdb</code>，关闭所有nginx进行执行<code>kill -9 pgrep nginx</code>，操作完后添加规则并设置hostname对应的规则</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl 127.0.0.1:8080/ab_admin?action=policy_set -d <span class="string">'&#123;"divtype":"arg_city","divdata":[&#123;"city":"BJ","upstream":"beta1_api"&#125;]&#125;'</span></div><div class="line">curl <span class="string">"127.0.0.1:8080/ab_admin?action=runtime_set&amp;hostname=tapi.abtesting.com&amp;policid=0"</span></div><div class="line">curl 127.0.0.1:8080/ab_admin?action=policy_set -d <span class="string">'&#123;"divtype":"arg_city","divdata":[&#123;"city":"BJ","upstream":"beta1_login"&#125;]&#125;'</span></div><div class="line">curl <span class="string">"127.0.0.1:8080/ab_admin?action=runtime_set&amp;hostname=tlogin.abtesting.com&amp;policyid=1"</span></div><div class="line">curl 127.0.0.1:8080/ab_admin?action=policy_set -d <span class="string">'&#123;"divtype":"arg_city","divdata":[&#123;"city":"BJ","upstream":"beta1_auth"&#125;]&#125;'</span></div><div class="line">curl <span class="string">"127.0.0.1:8080/ab_admin?action=runtime_set&amp;hostname=tauth.abtesting.com&amp;policyid=2"</span></div></pre></td></tr></table></figure>
<ul>
<li>启动服务，测试规则</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /path/to/ABTestingGateway/utils</div><div class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf</div></pre></td></tr></table></figure>
<p>在浏览器中输入tapi.abtesting.com将转发到<em>stable_api</em>配置的upstream，输入<code>tapi.abtesting.com?city=BJ</code>将转发到<em>beta1_api</em>配置的upstream，<code>tlogin.abtesting.com</code>和<code>tauth.abtesting.com</code>同理，这里域名可以修改主机的hosts文件来绑定</p>
<h2 id="https支持"><a href="#https支持" class="headerlink" title="https支持"></a>https支持</h2><p>以<code>https://tapi.abtesting.com</code>为例，修改api.conf<br>将80端口的server复制一份修改监听端口为443，在server_name下面添加如下配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ssl                  on;</div><div class="line">ssl_certificate      abtesting.com_bundle.crt;</div><div class="line">ssl_certificate_key  abtesting.com.key;</div><div class="line">ssl_session_timeout  5m;</div><div class="line">ssl_protocols  SSLv3 TLSv1;</div><div class="line">ssl_ciphers  HIGH:!ADH:!EXPORT56:RC4+RSA:+MEDIUM;</div><div class="line">ssl_prefer_server_ciphers   on;</div></pre></td></tr></table></figure>
<p>其中<code>abtesting.com_bundle.crt</code>和<code>abtesting.com.key</code>分别为私钥和公钥的文件名，放置在nginx.conf的同目录中，最终为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       443;</div><div class="line">        server_name  tlogin.abtesting.com;</div><div class="line">        ssl                  on;</div><div class="line">        ssl_certificate      abtesting.com_bundle.crt;</div><div class="line">        ssl_certificate_key  abtesting.com.key;</div><div class="line">        ssl_session_timeout  5m;</div><div class="line">        ssl_protocols  SSLv3 TLSv1;</div><div class="line">        ssl_ciphers  HIGH:!ADH:!EXPORT56:RC4+RSA:+MEDIUM;</div><div class="line">        ssl_prefer_server_ciphers   on;</div><div class="line"></div><div class="line"></div><div class="line">        access_log logs/vhost_access.log  main;</div><div class="line">        error_log  logs/vhost_error.log;</div><div class="line"></div><div class="line">        proxy_redirect off;</div><div class="line">        proxy_set_header Host <span class="variable">$host</span>;</div><div class="line">        proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</div><div class="line"></div><div class="line">        <span class="built_in">set</span> <span class="variable">$redis_host</span> <span class="string">'127.0.0.1'</span>;</div><div class="line">        <span class="built_in">set</span> <span class="variable">$redis_port</span> <span class="string">'6379'</span>;</div><div class="line">        <span class="built_in">set</span> <span class="variable">$redis_uds</span> <span class="string">'/var/run/redis.sock'</span>;</div><div class="line">        <span class="built_in">set</span> <span class="variable">$redis_connect_timeout</span> 10000;</div><div class="line">        <span class="built_in">set</span> <span class="variable">$redis_dbid</span> 0;</div><div class="line">        <span class="built_in">set</span> <span class="variable">$redis_pool_size</span> 1000;</div><div class="line">        <span class="built_in">set</span> <span class="variable">$redis_keepalive_timeout</span> 90000;</div><div class="line"></div><div class="line">        location ~*  /abc/(i|f)/ &#123;</div><div class="line">                <span class="built_in">set</span> <span class="variable">$hostkey</span> <span class="variable">$server_name</span>.abc;</div><div class="line">                <span class="built_in">set</span> <span class="variable">$sysConfig</span> api_abc_sysConfig;</div><div class="line">                <span class="built_in">set</span> <span class="variable">$kv_upstream</span> kv_api_abc_upstream;</div><div class="line">                <span class="built_in">set</span> <span class="variable">$backend</span> <span class="string">'stable_login'</span>;</div><div class="line">                rewrite_by_lua_file <span class="string">'../diversion/diversion.lua'</span>;</div><div class="line">                proxy_pass http://<span class="variable">$backend</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line"></div><div class="line">                error_log  logs/vhost_error.log debug;</div><div class="line"></div><div class="line">                <span class="built_in">set</span> <span class="variable">$hostkey</span> <span class="variable">$server_name</span>;</div><div class="line">                <span class="built_in">set</span> <span class="variable">$sysConfig</span> api_root_sysConfig;</div><div class="line">                <span class="built_in">set</span> <span class="variable">$kv_upstream</span> kv_api_root_upstream;</div><div class="line">                <span class="built_in">set</span> <span class="variable">$backend</span> <span class="string">'stable_login'</span>;</div><div class="line">                rewrite_by_lua_file <span class="string">'../diversion/diversion.lua'</span>;</div><div class="line">                proxy_pass http://<span class="variable">$backend</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改完成后重启nginx，执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -p `<span class="built_in">pwd</span>` -c conf/nginx.conf -s reload</div></pre></td></tr></table></figure>
<p>在浏览器中输入<code>https://tapi.abtesting.com</code>和<code>https://stapi.abtesting.com?city=BJ</code>进行测试，如需将http重定向为https，在80监听的<code>location /</code>中添加<code>rewrite ^(.*)$  https://$host$1 permanent;</code></p>
<h2 id="websocket支持"><a href="#websocket支持" class="headerlink" title="websocket支持"></a>websocket支持</h2><ul>
<li>在upstream中添加websocket的upstream</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">upstream  beta1_websocket  &#123;</div><div class="line">    server    10.10.16.91:8899    weight=1 fail_timeout=10 max_fails=1;</div><div class="line">&#125;</div><div class="line">upstream  stable_websocket  &#123;</div><div class="line">    server    10.10.16.117:8899    weight=1 fail_timeout=10 max_fails=1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>复制一份api.conf命名为websocket.conf，修改server_name和stable对应的配置，分别在80和443监听中<code>location /</code>位置添加如下配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">proxy_http_version 1.1;</div><div class="line">proxy_read_timeout 7200s;</div><div class="line">proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</div><div class="line">proxy_set_header Connection <span class="variable">$connection_upgrade</span>;</div></pre></td></tr></table></figure>
<ul>
<li>在nginx.conf文件中添加如下配置，重启nginx</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">map <span class="variable">$http_upgrade</span> <span class="variable">$connection_upgrade</span> &#123;</div><div class="line">        default upgrade;</div><div class="line">        <span class="string">''</span>      close;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>添加websocket的AB规则并绑定</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl 127.0.0.1:8080/ab_admin?action=policy_set -d <span class="string">'&#123;"divtype":"arg_city","divdata":[&#123;"city":"BJ","upstream":"beta1_websocket"&#125;]&#125;'</span></div><div class="line">curl <span class="string">"127.0.0.1:8080/ab_admin?action=runtime_set&amp;hostname=twebsocket.abtesting.com&amp;policid=3"</span></div></pre></td></tr></table></figure>
<ul>
<li>测试websocket，如下为websocket的h5客户端，修改ws的地址后打开页面进行测试</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My WebSocket<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">Welcome<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"send()"</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"closeWebSocket()"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    var websocket = null;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    //判断当前浏览器是否支持WebSocket</span></div><div class="line"><span class="undefined">    if('WebSocket' in window)&#123;</span></div><div class="line"><span class="undefined">        websocket = new WebSocket("wss://twebsocket.abtesting.com/websocket?city=BJ");</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    else&#123;</span></div><div class="line"><span class="undefined">        alert('Not support websocket')</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    //连接发生错误的回调方法</span></div><div class="line"><span class="undefined">    websocket.onerror = function()&#123;</span></div><div class="line"><span class="undefined">        setMessageInnerHTML("error");</span></div><div class="line"><span class="undefined">    &#125;;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    //连接成功建立的回调方法</span></div><div class="line"><span class="undefined">    websocket.onopen = function(event)&#123;</span></div><div class="line"><span class="undefined">        setMessageInnerHTML("open");</span></div><div class="line"><span class="undefined">        setMessageInnerHTML(getNowFormatDate());</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    //接收到消息的回调方法</span></div><div class="line"><span class="undefined">    websocket.onmessage = function(event)&#123;</span></div><div class="line"><span class="undefined">        setMessageInnerHTML(event.data);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    //连接关闭的回调方法</span></div><div class="line"><span class="undefined">    websocket.onclose = function()&#123;</span></div><div class="line"><span class="undefined">        setMessageInnerHTML("close");</span></div><div class="line"><span class="undefined">        setMessageInnerHTML(getNowFormatDate());</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></div><div class="line"><span class="undefined">    window.onbeforeunload = function()&#123;</span></div><div class="line"><span class="undefined">        websocket.close();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    //将消息显示在网页上</span></div><div class="line"><span class="undefined">    function setMessageInnerHTML(innerHTML)&#123;</span></div><div class="line"><span class="xml">        document.getElementById('message').innerHTML += innerHTML + '<span class="tag">&lt;<span class="name">br</span>/&gt;</span>';</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    //关闭连接</span></div><div class="line"><span class="undefined">    function closeWebSocket()&#123;</span></div><div class="line"><span class="undefined">        websocket.close();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    // 获取当前日期</span></div><div class="line"><span class="undefined">    function getNowFormatDate() &#123;</span></div><div class="line"><span class="undefined">        var date = new Date();</span></div><div class="line"><span class="undefined">        var seperator1 = "-";</span></div><div class="line"><span class="undefined">        var seperator2 = ":";</span></div><div class="line"><span class="undefined">        var month = date.getMonth() + 1;</span></div><div class="line"><span class="undefined">        var strDate = date.getDate();</span></div><div class="line"><span class="undefined">        if (month &gt;= 1 &amp;&amp; month &lt;= 9) &#123;</span></div><div class="line"><span class="undefined">            month = "0" + month;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        if (strDate &gt;= 0 &amp;&amp; strDate &lt;= 9) &#123;</span></div><div class="line"><span class="undefined">            strDate = "0" + strDate;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        var currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate</span></div><div class="line"><span class="undefined">                + " " + date.getHours() + seperator2 + date.getMinutes()</span></div><div class="line"><span class="undefined">                + seperator2 + date.getSeconds();</span></div><div class="line"><span class="undefined">        return currentdate;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    //发送消息</span></div><div class="line"><span class="undefined">    function send()&#123;</span></div><div class="line"><span class="undefined">        var message = document.getElementById('text').value;</span></div><div class="line"><span class="undefined">        websocket.send(message);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>地址为<code>wss://twebsocket.abtesting.com/websokcet</code>将转发到<em>stable_websocket</em>，<code>wss://twebsocket.abtesting.com/websokcet?city=BJ</code>将转发到<em>beta1_websocket</em></p>
<hr>
]]></content>
      
        <categories>
            
            <category> Nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 动态灰度发布 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jenkins+docker持续集成构建SpringBoot项目]]></title>
      <url>https://zixianc.github.io/2017/12/06/springboot-docker-jenkins/</url>
      <content type="html"><![CDATA[<h2 id="SpringBoot项目配置"><a href="#SpringBoot项目配置" class="headerlink" title="SpringBoot项目配置"></a>SpringBoot项目配置</h2><p>假设要构建一个用户中心服务，新建一个名为user-center的SpringBoot项目</p>
<h3 id="在springboot项目pom-xml中添加依赖"><a href="#在springboot项目pom-xml中添加依赖" class="headerlink" title="在springboot项目pom.xml中添加依赖"></a>在springboot项目pom.xml中添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- docker打包 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">serverId</span>&gt;</span>docker-hosted<span class="tag">&lt;/<span class="name">serverId</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- docker仓库地址，用于推送镜像 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">registryUrl</span>&gt;</span>$&#123;docker.repository&#125;<span class="tag">&lt;/<span class="name">registryUrl</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">pushImage</span>&gt;</span>true<span class="tag">&lt;/<span class="name">pushImage</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- Dockerfile路径 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 构建的镜像名称 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.repository&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>latest<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>docker仓库地址可以直接写在pom文件中，但为了多环境配置可以将地址配置在maven-settings.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span>    </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span>    </div><div class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">docker.repository</span>&gt;</span>10.10.16.160:8083<span class="tag">&lt;/<span class="name">docker.repository</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span>    </div><div class="line"> <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="创建Dockerfile"><a href="#创建Dockerfile" class="headerlink" title="创建Dockerfile"></a>创建Dockerfile</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">FROM java:8 <span class="comment"># 基础镜像（主程序镜像）</span></div><div class="line">VOLUME /tmp <span class="comment"># 挂在tmp盘</span></div><div class="line">ADD user-center-0.0.1-SNAPSHOT.jar workdir/app.jar</div><div class="line">WORKDIR workdir <span class="comment"># 指定工作目录</span></div><div class="line">ENV JAVA_OPTS=<span class="string">""</span></div><div class="line">ENTRYPOINT [ <span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"java -Djava.security.egd=file:/dev/./urandom -Duser.timezone=GMT+08 <span class="variable">$JAVA_OPTS</span> -jar /workdir/app.jar"</span> ] <span class="comment"># 程序入口，支持动态传参</span></div></pre></td></tr></table></figure>
<h3 id="测试手动构建镜像"><a href="#测试手动构建镜像" class="headerlink" title="测试手动构建镜像"></a>测试手动构建镜像</h3><p>在命令行进入到项目路径执行<code>mvn clean package docker:build</code>来构建镜像，执行<code>mvn clean package docker:build -DpushImage</code>构建并推送镜像docker仓库</p>
<h2 id="Jenkins项目构建"><a href="#Jenkins项目构建" class="headerlink" title="Jenkins项目构建"></a>Jenkins项目构建</h2><p>新建一个名为user-center的maven项目</p>
<h3 id="配置git仓库"><a href="#配置git仓库" class="headerlink" title="配置git仓库"></a>配置git仓库</h3><p><img src="http://p0kzweqn4.bkt.clouddn.com/jenkins1.png" alt="git仓库"></p>
<h3 id="配置构建服务器"><a href="#配置构建服务器" class="headerlink" title="配置构建服务器"></a>配置构建服务器</h3><p><img src="http://p0kzweqn4.bkt.clouddn.com/jenkins2.png" alt="添加构建服务器"></p>
<h3 id="配置构建步骤"><a href="#配置构建步骤" class="headerlink" title="配置构建步骤"></a>配置构建步骤</h3><p><img src="http://p0kzweqn4.bkt.clouddn.com/jenkins3.png" alt="构建步骤"></p>
<h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><p>jenkins配置中用到的run-server脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#私有仓库地址</span></div><div class="line">REPO_URL=<span class="variable">$&#123;1&#125;</span></div><div class="line"><span class="comment">#项目名称</span></div><div class="line">PROJ_NAME=<span class="variable">$&#123;2&#125;</span></div><div class="line"><span class="comment">#项目运行环境，多环境配置</span></div><div class="line">PROFILE_ACTIVE=<span class="variable">$&#123;3&#125;</span></div><div class="line"><span class="comment">#eureka注册中心地址，未接入忽略该配置</span></div><div class="line">EUREKA_URL=<span class="variable">$&#123;4&#125;</span></div><div class="line"></div><div class="line"><span class="comment">#停止原来的熔器</span></div><div class="line">docker stop <span class="variable">$&#123;PROJ_NAME&#125;</span></div><div class="line"><span class="comment">#删除原来的容器</span></div><div class="line">docker rm <span class="variable">$&#123;PROJ_NAME&#125;</span></div><div class="line"><span class="comment">#删除原来的镜像</span></div><div class="line">docker rmi <span class="variable">$&#123;REPO_URL&#125;</span>/<span class="variable">$&#123;PROJ_NAME&#125;</span></div><div class="line"><span class="comment">#登录docker仓库</span></div><div class="line">docker login --username=username --password=passwd <span class="variable">$&#123;REPO_URL&#125;</span></div><div class="line"><span class="comment">#重新拉取新镜像</span></div><div class="line">docker pull <span class="variable">$&#123;REPO_URL&#125;</span>/<span class="variable">$&#123;PROJ_NAME&#125;</span></div><div class="line"><span class="comment">#运行新的容器</span></div><div class="line">docker run -itd \</div><div class="line">--restart=always \</div><div class="line">--net=host \</div><div class="line">-m 2048m \</div><div class="line">--name <span class="variable">$&#123;PROJ_NAME&#125;</span> \</div><div class="line">-v /etc/localtime:/etc/localtime:ro \</div><div class="line">--env JAVA_OPTS=<span class="string">"-Dspring.profiles.active=<span class="variable">$&#123;PROFILE_ACTIVE&#125;</span> -Deureka.client.serviceUrl.defaultZone=<span class="variable">$&#123;EUREKA_URL&#125;</span> -server -Xms1024m -Xmx2048m  -XX:PermSize=64M -XX:MaxNewSize=256m -XX:MaxPermSize=128m -Djava.awt.headless=true -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp"</span> \</div><div class="line"><span class="variable">$&#123;REPO_URL&#125;</span>/<span class="variable">$&#123;PROJ_NAME&#125;</span></div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> SpringBoot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> springboot </tag>
            
            <tag> jenkins </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos7安装mysql]]></title>
      <url>https://zixianc.github.io/2017/12/04/mysql-install/</url>
      <content type="html"><![CDATA[<h2 id="安装mysql-rpm包"><a href="#安装mysql-rpm包" class="headerlink" title="安装mysql-rpm包"></a>安装mysql-rpm包</h2><p>直接安装:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</div></pre></td></tr></table></figure>
<p>或者下载到本地后安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</div><div class="line">yum localinstall mysql-community-release-el7-5.noarch.rpm</div></pre></td></tr></table></figure>
<p>验证是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum repolist enabled | grep <span class="string">"mysql.*-community.*"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="安装mysql-server"><a href="#安装mysql-server" class="headerlink" title="安装mysql-server"></a>安装mysql-server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install mysql-community-server  -y</div><div class="line">rpm -qi mysql-community-server.x86_64 0:5.6.24-3.el7</div></pre></td></tr></table></figure>
<h2 id="相关设置"><a href="#相关设置" class="headerlink" title="相关设置"></a>相关设置</h2><h3 id="修改字符集"><a href="#修改字符集" class="headerlink" title="修改字符集"></a>修改字符集</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/my.cnf</div></pre></td></tr></table></figure>
<p>在<code>[mysqld]</code>下添加<code>character_set_server = utf8</code>，启动后<code>SHOW VARIABLES LIKE &#39;character%&#39;;</code>查看字符集信息</p>
<h3 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h3><p><code>systemctl start mysqld</code>启动服务后<br><code>mysqladmin -u root password &#39;new-passwd&#39;</code></p>
<h3 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'passwd'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</div><div class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</div></pre></td></tr></table></figure>
<p>###安全设置（可选）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_secure_installation;</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[获取docker容器内java进程的堆栈信息]]></title>
      <url>https://zixianc.github.io/2017/11/23/docker-java-thread-heap-dump/</url>
      <content type="html"><![CDATA[<h2 id="进入docker容器内"><a href="#进入docker容器内" class="headerlink" title="进入docker容器内"></a>进入docker容器内</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -it CONTAINER_NAME bash</div></pre></td></tr></table></figure>
<h2 id="查看java进程"><a href="#查看java进程" class="headerlink" title="查看java进程"></a>查看java进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jps</div></pre></td></tr></table></figure>
<h2 id="转存进程Thread信息"><a href="#转存进程Thread信息" class="headerlink" title="转存进程Thread信息"></a>转存进程Thread信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jstack PID &gt; thread.tdump</div></pre></td></tr></table></figure>
<h2 id="转存进程Heap信息"><a href="#转存进程Heap信息" class="headerlink" title="转存进程Heap信息"></a>转存进程Heap信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jmap -dump:live,format=b,file=heapDump.hprof PID</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="从容器中拷贝出文件"><a href="#从容器中拷贝出文件" class="headerlink" title="从容器中拷贝出文件"></a>从容器中拷贝出文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo docker cp CONTAINER_NAME:threadDump.tdump .</div><div class="line">sudo docker cp CONTAINER_NAME:heapDump.hprof .</div></pre></td></tr></table></figure>
<h2 id="进行内存分析"><a href="#进行内存分析" class="headerlink" title="进行内存分析"></a>进行内存分析</h2><p>使用JProfiler、<a href="http://www.eclipse.org/mat/downloads.php" target="_blank" rel="external">MAT</a>等工具进行内存分析</p>
<hr>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos7安装docker]]></title>
      <url>https://zixianc.github.io/2017/11/22/docker-install/</url>
      <content type="html"><![CDATA[<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#aliyun镜像 </span></div><div class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</div><div class="line"><span class="comment">#daocloud镜像 </span></div><div class="line">curl -fsSL https://get.docker.com/ | sh</div></pre></td></tr></table></figure>
<h2 id="配置加速器"><a href="#配置加速器" class="headerlink" title="配置加速器"></a>配置加速器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir -p /etc/docker</div><div class="line">tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"aliyun加速地址"</span>]</div><div class="line">&#125;</div><div class="line">EOF</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="修改允许非安全的仓库"><a href="#修改允许非安全的仓库" class="headerlink" title="修改允许非安全的仓库"></a>修改允许非安全的仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/lib/systemd/system/docker.service</div></pre></td></tr></table></figure>
<p>找到ExecStart属性，在dockerd后面添加–insecure-registry 服务器IP:Docker仓库端口 ，最终为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ExecStart=/usr/bin/dockerd --insecure-registry 0.0.0.0/0</div></pre></td></tr></table></figure>
<h2 id="设置开机并重启docker"><a href="#设置开机并重启docker" class="headerlink" title="设置开机并重启docker"></a>设置开机并重启docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">systemctl <span class="built_in">enable</span> docker</div><div class="line">systemctl daemon-reload</div><div class="line">systemctl restart docker</div><div class="line">docker login --username=admin --passwrod=seentao registry-host:port</div></pre></td></tr></table></figure>
<h2 id="安装docker-bash"><a href="#安装docker-bash" class="headerlink" title="安装docker-bash"></a>安装docker-bash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install wget -y</div><div class="line">wget -P ~ https://github.com/yeasy/docker_practice/raw/master/_local/.bashrc_docker</div><div class="line"><span class="built_in">echo</span> <span class="string">"[ -f ~/.bashrc_docker ] &amp;&amp; . ~/.bashrc_docker"</span> &gt;&gt; ~/.bashrc</div><div class="line"><span class="built_in">source</span> ~/.bashrc</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> centos7 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
